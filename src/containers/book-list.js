import React, { Component } from 'react';
// Connect turns booklist from component to a container
import { connect } from 'react-redux';
// Import action creator
import { selectBook } from '../actions/index';
// Action generated by actioncreator, ends up flowing
// in all reducers.
import { bindActionCreators } from 'redux';

// Container react component, direct connection to state managed by redux
// React Redux have to be combined.
// On forging a connection between react and redux
// it turns a component into a container

class BookList extends Component {
    renderList() {
        return this.props.books.map((book) => {
            return (
                <li key={book.title} className="list-group-item">{book.title}</li>
            );
        });
    }

    render() {
        return (
            <ul className="list-group col-sm-4">
                {this.renderList()}
            </ul>
        )
    }
}

// GLUE between react and redux
// Take our application state as an argument
// Change in state = re-rendering
function mapStatetoProps(state) {
    // Whatever is returned here will show up as props
    // inside of booklist
    // This returned object is available to renderList as props
    return {
        books: state.books
    };       
}

// Anything returned from this function will end up props 
// on the Booklist container
function mapDispatchtoProps(dispath) {
    // When selectBook is called, result should
    // be passed to all of our reducers
    // dispatch receives actions and splits them all out
    // to reducers and applications
    return bindActionCreators({selectBook: selectBook}, dispatch);
}

// Connect function
// Take map state and return container
// Takes a function and a component and produces a container
// A container is aware of the state

// Promote Booklist from component to a container
// it needs to know about this new dispatch method, selectBook
// and make it available
export default connect(mapStatetoProps)(BookList);
